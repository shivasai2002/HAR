{"metadata":{"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.6","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":297449,"sourceType":"datasetVersion","datasetId":123356}],"dockerImageVersionId":29994,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":true},"colab":{"provenance":[{"file_id":"https://storage.googleapis.com/kaggle-colab-exported-notebooks/human-activity-recognition-cnn-lstm-d730c3b1-0066-4bdb-b624-2e388c7eae33.ipynb?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com/20240322/auto/storage/goog4_request&X-Goog-Date=20240322T172830Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=4762cde7354130f73b6d389b289b02efc96b99013d517ce500ad104a55b7b1ef5edfeef4139c42202ba7d8108db97023ed5c1a38abe768b63ee253627ef06b75a0de65ee31a554cff162850c5cc6b35db509c1fa79410ba671abfda5b0b8a9c74e8187551fb451192572e2c5234c7b589496dc21e7d153895141fe31bef8770285d1604b7f1afae352e248485c7a8966ca3db06283529aa946615ae05e0c9c8130e5a47689f05c4cc590735018d29a6428e9f308f0292467b044e9a8901662f55c996f03a5c350e6c0b3dc3ef2c9174c2015b439dd97c2fdfdbf7bbb6767bee52dc9afd9784af60777b645236e6ccde00ed178bfec9fbfae052709cfc0202de6","timestamp":1711172377439}],"gpuType":"T4"},"accelerator":"GPU"},"nbformat_minor":0,"nbformat":4,"cells":[{"source":["\n","# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES\n","# TO THE CORRECT LOCATION (/kaggle/input) IN YOUR NOTEBOOK,\n","# THEN FEEL FREE TO DELETE THIS CELL.\n","# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON\n","# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR\n","# NOTEBOOK.\n","!pip install scikeras\n","import os\n","import sys\n","from tempfile import NamedTemporaryFile\n","from urllib.request import urlopen\n","from urllib.parse import unquote, urlparse\n","from urllib.error import HTTPError\n","from zipfile import ZipFile\n","import tarfile\n","import shutil\n","\n","CHUNK_SIZE = 40960\n","DATA_SOURCE_MAPPING = 'human-activity-recognition:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F123356%2F297449%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240322%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240322T172830Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D575759437ecfe73ea81e8f89e75ec82f8b37ff3224b2067668233908a40067d1be3740089d77388f2cda97cc66a6eadbb1edff9c157eac67a6f9ee41a11335694a05a6e43891d1eacf5b5da09d73b53050615053be447d5eb142b9d92fc937ef9e994e80b6012cc066ce53355ad6e2ec79e20bed35630e02e7bcdbf2b101181d0f28714b48330b98b9f0278d17759de9e776fca8cc842d8f6f02284a7913e6a28d334610246c74e20dc3532748ac319bfcb44520a1911c1db685e53dc71c045595012eebb649a501c1b2968da0fbd8571712dcb21f266ca41337147abcaea10080558dcaf5884424438d98c6ab09dbd07c96b9090a038bfabed8b90667fe5e06'\n","\n","KAGGLE_INPUT_PATH='/kaggle/input'\n","KAGGLE_WORKING_PATH='/kaggle/working'\n","KAGGLE_SYMLINK='kaggle'\n","\n","!umount /kaggle/input/ 2> /dev/null\n","shutil.rmtree('/kaggle/input', ignore_errors=True)\n","os.makedirs(KAGGLE_INPUT_PATH, 0o777, exist_ok=True)\n","os.makedirs(KAGGLE_WORKING_PATH, 0o777, exist_ok=True)\n","\n","try:\n","  os.symlink(KAGGLE_INPUT_PATH, os.path.join(\"..\", 'input'), target_is_directory=True)\n","except FileExistsError:\n","  pass\n","try:\n","  os.symlink(KAGGLE_WORKING_PATH, os.path.join(\"..\", 'working'), target_is_directory=True)\n","except FileExistsError:\n","  pass\n","\n","for data_source_mapping in DATA_SOURCE_MAPPING.split(','):\n","    directory, download_url_encoded = data_source_mapping.split(':')\n","    download_url = unquote(download_url_encoded)\n","    filename = urlparse(download_url).path\n","    destination_path = os.path.join(KAGGLE_INPUT_PATH, directory)\n","    try:\n","        with urlopen(download_url) as fileres, NamedTemporaryFile() as tfile:\n","            total_length = fileres.headers['content-length']\n","            print(f'Downloading {directory}, {total_length} bytes compressed')\n","            dl = 0\n","            data = fileres.read(CHUNK_SIZE)\n","            while len(data) > 0:\n","                dl += len(data)\n","                tfile.write(data)\n","                done = int(50 * dl / int(total_length))\n","                sys.stdout.write(f\"\\r[{'=' * done}{' ' * (50-done)}] {dl} bytes downloaded\")\n","                sys.stdout.flush()\n","                data = fileres.read(CHUNK_SIZE)\n","            if filename.endswith('.zip'):\n","              with ZipFile(tfile) as zfile:\n","                zfile.extractall(destination_path)\n","            else:\n","              with tarfile.open(tfile.name) as tarfile:\n","                tarfile.extractall(destination_path)\n","            print(f'\\nDownloaded and uncompressed: {directory}')\n","    except HTTPError as e:\n","        print(f'Failed to load (likely expired) {download_url} to path {destination_path}')\n","        continue\n","    except OSError as e:\n","        print(f'Failed to load {download_url} to path {destination_path}')\n","        continue\n","\n","print('Data source import complete.')\n"],"metadata":{"id":"KryXfIAwNR1H","executionInfo":{"status":"ok","timestamp":1711444480805,"user_tz":-330,"elapsed":14029,"user":{"displayName":"Shiva Sai Kumar Saini","userId":"05040382533783744648"}},"outputId":"05e7e4b2-e1b1-488a-a54b-d96894a3d532","colab":{"base_uri":"https://localhost:8080/"}},"cell_type":"code","outputs":[{"output_type":"stream","name":"stdout","text":["Collecting scikeras\n","  Downloading scikeras-0.12.0-py3-none-any.whl (27 kB)\n","Requirement already satisfied: packaging>=0.21 in /usr/local/lib/python3.10/dist-packages (from scikeras) (24.0)\n","Requirement already satisfied: scikit-learn>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from scikeras) (1.2.2)\n","Requirement already satisfied: numpy>=1.17.3 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=1.0.0->scikeras) (1.25.2)\n","Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=1.0.0->scikeras) (1.11.4)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=1.0.0->scikeras) (1.3.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=1.0.0->scikeras) (3.3.0)\n","Installing collected packages: scikeras\n","Successfully installed scikeras-0.12.0\n","Failed to load (likely expired) https://storage.googleapis.com/kaggle-data-sets/123356/297449/bundle/archive.zip?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com%2F20240322%2Fauto%2Fstorage%2Fgoog4_request&X-Goog-Date=20240322T172830Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=575759437ecfe73ea81e8f89e75ec82f8b37ff3224b2067668233908a40067d1be3740089d77388f2cda97cc66a6eadbb1edff9c157eac67a6f9ee41a11335694a05a6e43891d1eacf5b5da09d73b53050615053be447d5eb142b9d92fc937ef9e994e80b6012cc066ce53355ad6e2ec79e20bed35630e02e7bcdbf2b101181d0f28714b48330b98b9f0278d17759de9e776fca8cc842d8f6f02284a7913e6a28d334610246c74e20dc3532748ac319bfcb44520a1911c1db685e53dc71c045595012eebb649a501c1b2968da0fbd8571712dcb21f266ca41337147abcaea10080558dcaf5884424438d98c6ab09dbd07c96b9090a038bfabed8b90667fe5e06 to path /kaggle/input/human-activity-recognition\n","Data source import complete.\n"]}],"execution_count":1},{"cell_type":"markdown","source":["# Neural Network Models"],"metadata":{"id":"MUptGRAdNR1g"}},{"cell_type":"code","source":["# This Python 3 environment comes with many helpful analytics libraries installed\n","# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n","# For example, here's several helpful packages to load\n","\n","import numpy as np # linear algebra\n","import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import keras\n","%matplotlib inline\n","plt.style.use('seaborn-whitegrid')\n","sns.set_style(\"white\")\n","from keras.models import Sequential\n","from keras.layers import Dense\n","from keras.layers import Flatten\n","from keras.layers import Dropout\n","from keras.layers import LSTM\n","from keras.layers import TimeDistributed\n","from keras.layers import Conv1D\n","from keras.layers import MaxPooling1D\n","from keras.layers import ConvLSTM2D\n","from keras.utils import to_categorical\n","from keras import backend as K\n","from keras.callbacks import EarlyStopping, ModelCheckpoint\n","from keras.models import load_model, model_from_json\n","from keras.metrics import CategoricalAccuracy, CategoricalCrossentropy\n","#from keras.wrappers.sklearn import KerasClassifier\n","from scikeras.wrappers import KerasClassifier\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.metrics import confusion_matrix, auc, roc_curve, roc_auc_score, precision_score, recall_score, f1_score, accuracy_score, classification_report\n","\n","from numpy.random import seed\n","from tensorflow.random import set_seed\n","\n","\n","\n","# Input data files are available in the read-only \"../input/\" directory\n","# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n","\n","import os\n","for dirname, _, filenames in os.walk('/kaggle/input'):\n","    for filename in filenames:\n","        print(os.path.join(dirname, filename))\n","\n","# You can write up to 5GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\"\n","# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"],"metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-03-21T14:04:20.649898Z","iopub.execute_input":"2024-03-21T14:04:20.65032Z","iopub.status.idle":"2024-03-21T14:04:28.155249Z","shell.execute_reply.started":"2024-03-21T14:04:20.650285Z","shell.execute_reply":"2024-03-21T14:04:28.154048Z"},"trusted":true,"id":"zFbqlz-uNR1m","executionInfo":{"status":"ok","timestamp":1711444489163,"user_tz":-330,"elapsed":8367,"user":{"displayName":"Shiva Sai Kumar Saini","userId":"05040382533783744648"}},"outputId":"2b097c37-825c-4b51-83fa-acd67abea8c1","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":2,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-2-682de6a672eb>:11: MatplotlibDeprecationWarning: The seaborn styles shipped by Matplotlib are deprecated since 3.6, as they no longer correspond to the styles shipped by seaborn. However, they will remain available as 'seaborn-v0_8-<style>'. Alternatively, directly use the seaborn API instead.\n","  plt.style.use('seaborn-whitegrid')\n"]}]},{"cell_type":"code","source":["activities = {\n","    1: 'Walking',\n","    2: 'Walking Upstairs',\n","    3: 'Walking Downstairs',\n","    4: 'Sitting',\n","    5: 'Standing',\n","    6: 'Laying'\n","}"],"metadata":{"_uuid":"d629ff2d2480ee46fbb7e2d37f6b5fab8052498a","_cell_guid":"79c7e3d0-c299-4dcb-8224-4455121ee9b0","execution":{"iopub.status.busy":"2024-03-21T14:04:28.157487Z","iopub.execute_input":"2024-03-21T14:04:28.157848Z","iopub.status.idle":"2024-03-21T14:04:28.163355Z","shell.execute_reply.started":"2024-03-21T14:04:28.157815Z","shell.execute_reply":"2024-03-21T14:04:28.162251Z"},"trusted":true,"id":"edbtZpc5NR1n","executionInfo":{"status":"ok","timestamp":1711444489164,"user_tz":-330,"elapsed":26,"user":{"displayName":"Shiva Sai Kumar Saini","userId":"05040382533783744648"}}},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":["## Data Pipeline"],"metadata":{"id":"hqwX6lXDNR1p"}},{"cell_type":"code","source":["# load a single file as a numpy array\n","def load_file(filepath):\n","    df = pd.read_csv(filepath, header=None, delim_whitespace=True)\n","    return df.values\n","\n","# load a list of files into a 3D array of [observations, timesteps, features(x,y,z)]\n","def load_group(files, prefix=''):\n","    loaded = list()\n","    for f in files:\n","        data = load_file(prefix + f)\n","        loaded.append(data)\n","    # stack group so that features are the 3rd dimension\n","    loaded = np.dstack(loaded)\n","    return loaded\n","\n","def load_dataset_group(group, prefix=''):\n","    filepath = prefix + group + '/Inertial Signals/'\n","    # load all 9 files as a single array\n","    files = list()\n","    # body acceleration\n","    files += ['body_acc_x_'+group+'.txt', 'body_acc_y_'+group+'.txt', 'body_acc_z_'+group+'.txt']\n","    # body gyroscope\n","    files += ['body_gyro_x_'+group+'.txt', 'body_gyro_y_'+group+'.txt', 'body_gyro_z_'+group+'.txt']\n","    # total acceleration\n","    files += ['total_acc_x_'+group+'.txt', 'total_acc_y_'+group+'.txt', 'total_acc_z_'+group+'.txt']\n","    # load input data\n","    X = load_group(files, filepath)\n","    # load class output\n","    y = load_file(prefix + group + '/y_'+group+'.txt')\n","    return X, y\n","\n","def load_dataset(prefix=''):\n","    # load all train\n","    X_train, y_train = load_dataset_group('train', prefix)\n","    # load all test\n","    X_test, y_test = load_dataset_group('test', prefix)\n","    # zero-offset class values\n","    y_train = y_train - 1\n","    y_test = y_test - 1\n","    y_train = to_categorical(y_train)\n","    y_test = to_categorical(y_test)\n","    print(f\"\"\"Dataset loaded.\n","Training Set:\n","X_train {X_train.shape} y_train {y_train.shape}\n","Test Set:\n","X_test {X_test.shape} y_test {y_test.shape}\"\"\")\n","    return X_train, y_train, X_test, y_test"],"metadata":{"execution":{"iopub.status.busy":"2024-03-21T14:04:28.165167Z","iopub.execute_input":"2024-03-21T14:04:28.165536Z","iopub.status.idle":"2024-03-21T14:04:28.184298Z","shell.execute_reply.started":"2024-03-21T14:04:28.165484Z","shell.execute_reply":"2024-03-21T14:04:28.183129Z"},"trusted":true,"id":"kEvtj4nhNR1r","executionInfo":{"status":"ok","timestamp":1711444489165,"user_tz":-330,"elapsed":26,"user":{"displayName":"Shiva Sai Kumar Saini","userId":"05040382533783744648"}}},"execution_count":4,"outputs":[]},{"cell_type":"markdown","source":["## Hyperparameters Tuning"],"metadata":{"id":"pIG9Tgx-NR1s"}},{"cell_type":"code","source":["def create_model(model):\n","    classifier = KerasClassifier(model, verbose=2)\n","    return classifier"],"metadata":{"execution":{"iopub.status.busy":"2024-03-21T14:04:28.186005Z","iopub.execute_input":"2024-03-21T14:04:28.186718Z","iopub.status.idle":"2024-03-21T14:04:28.193701Z","shell.execute_reply.started":"2024-03-21T14:04:28.186663Z","shell.execute_reply":"2024-03-21T14:04:28.192748Z"},"trusted":true,"id":"k-RJAkS1NR1u","executionInfo":{"status":"ok","timestamp":1711444489166,"user_tz":-330,"elapsed":27,"user":{"displayName":"Shiva Sai Kumar Saini","userId":"05040382533783744648"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["# GridSearch\n","def grid(classifier):\n","    # define the grid search parameters\n","    batch_size = [8, 16, 32, 64]\n","    epochs = [10, 15, 20, 25]\n","    validation_split=[0.2]\n","    param_grid = dict(batch_size=batch_size, epochs=epochs, validation_split=validation_split)\n","    grid = GridSearchCV(estimator=classifier, param_grid=param_grid, n_jobs=-1, cv=5, return_train_score=True, verbose=2)\n","    grid_result = grid.fit(X_train, y_train)\n","    # summarize results\n","    print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n","    means = grid_result.cv_results_['mean_test_score']\n","    stds = grid_result.cv_results_['std_test_score']\n","    params = grid_result.cv_results_['params']\n","    for mean, stdev, param in zip(means, stds, params):\n","        print(\"%f (%f) with: %r\" % (mean, stdev, param))\n","    return grid_result"],"metadata":{"execution":{"iopub.status.busy":"2024-03-21T14:04:28.197137Z","iopub.execute_input":"2024-03-21T14:04:28.197746Z","iopub.status.idle":"2024-03-21T14:04:28.209728Z","shell.execute_reply.started":"2024-03-21T14:04:28.197701Z","shell.execute_reply":"2024-03-21T14:04:28.208533Z"},"trusted":true,"id":"GyslSe7iNR1v","executionInfo":{"status":"ok","timestamp":1711444489166,"user_tz":-330,"elapsed":26,"user":{"displayName":"Shiva Sai Kumar Saini","userId":"05040382533783744648"}}},"execution_count":6,"outputs":[]},{"cell_type":"markdown","source":["## Evaluate Model"],"metadata":{"id":"7RfkZ34ENR1w"}},{"cell_type":"code","source":["def evaluate_model(X_train, y_train, X_test, y_test, params, model):\n","    epochs, batch_size = params[\"epochs\"], params[\"batch_size\"]\n","    es =EarlyStopping(monitor='val_loss', patience=5)\n","    classifier=model()\n","    history = classifier.fit(X_train, y_train, epochs=epochs, batch_size=batch_size, verbose=2, validation_split=0.2, callbacks=[es])\n","    # evaluate model\n","    _, accuracy = classifier.evaluate( X_test, y_test, batch_size=batch_size, verbose=0)\n","    return history, accuracy, classifier"],"metadata":{"execution":{"iopub.status.busy":"2024-03-21T14:04:28.212345Z","iopub.execute_input":"2024-03-21T14:04:28.212979Z","iopub.status.idle":"2024-03-21T14:04:28.226132Z","shell.execute_reply.started":"2024-03-21T14:04:28.212935Z","shell.execute_reply":"2024-03-21T14:04:28.224991Z"},"trusted":true,"id":"s5JbQBKvNR1x","executionInfo":{"status":"ok","timestamp":1711444489167,"user_tz":-330,"elapsed":26,"user":{"displayName":"Shiva Sai Kumar Saini","userId":"05040382533783744648"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["def run_model(model, grid_result):\n","    history, score, classifier = evaluate_model(X_train, y_train, X_test, y_test, grid_result.best_params_, model)\n","    score = score * 100.0\n","    print('> %.3f' % (score))\n","    results=pd.DataFrame(history.history, index=history.epoch)\n","    return results, classifier"],"metadata":{"execution":{"iopub.status.busy":"2024-03-21T14:04:28.228021Z","iopub.execute_input":"2024-03-21T14:04:28.228386Z","iopub.status.idle":"2024-03-21T14:04:28.236717Z","shell.execute_reply.started":"2024-03-21T14:04:28.228326Z","shell.execute_reply":"2024-03-21T14:04:28.235629Z"},"trusted":true,"id":"vfalqvKPNR1y","executionInfo":{"status":"ok","timestamp":1711444489167,"user_tz":-330,"elapsed":27,"user":{"displayName":"Shiva Sai Kumar Saini","userId":"05040382533783744648"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["def plot_loss(results):\n","    plt.style.use('seaborn-whitegrid')\n","    sns.set(style=\"white\", font_scale = 1.5)\n","    fig, axes = plt.subplots(1,2, figsize=(20,10), sharex=True)\n","    axes[0].set_title('Loss')\n","    axes[0].plot(results['loss'], label='train', )\n","    axes[0].plot(results['val_loss'], label='test')\n","    axes[0].legend()\n","    #plot accuracy during training\n","    axes[1].set_title('Accuracy')\n","    axes[1].plot(results['accuracy'], label='train')\n","    axes[1].plot(results['val_accuracy'], label='test')\n","    axes[1].legend()\n","    plt.show()\n","    return"],"metadata":{"execution":{"iopub.status.busy":"2024-03-21T14:04:28.238131Z","iopub.execute_input":"2024-03-21T14:04:28.238596Z","iopub.status.idle":"2024-03-21T14:04:28.251234Z","shell.execute_reply.started":"2024-03-21T14:04:28.238556Z","shell.execute_reply":"2024-03-21T14:04:28.249929Z"},"trusted":true,"id":"s-LV-QRINR1z","executionInfo":{"status":"ok","timestamp":1711444489168,"user_tz":-330,"elapsed":26,"user":{"displayName":"Shiva Sai Kumar Saini","userId":"05040382533783744648"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["def run(model):\n","    classifier=create_model(model)\n","    grid_result=grid(classifier)\n","    results, classifier=run_model(model, grid_result)\n","    plot_loss(results)\n","    return classifier"],"metadata":{"execution":{"iopub.status.busy":"2024-03-21T14:04:28.252723Z","iopub.execute_input":"2024-03-21T14:04:28.253285Z","iopub.status.idle":"2024-03-21T14:04:28.266361Z","shell.execute_reply.started":"2024-03-21T14:04:28.253242Z","shell.execute_reply":"2024-03-21T14:04:28.265018Z"},"trusted":true,"id":"aX2-o51pNR10","executionInfo":{"status":"ok","timestamp":1711444489169,"user_tz":-330,"elapsed":26,"user":{"displayName":"Shiva Sai Kumar Saini","userId":"05040382533783744648"}}},"execution_count":10,"outputs":[]},{"cell_type":"markdown","source":["## Base Model"],"metadata":{"id":"l65MEBvWNR10"}},{"cell_type":"code","source":["X_train, y_train, X_test, y_test = load_dataset(prefix=\"../input/human-activity-recognition/UCI_HAR_Dataset/\")\n","n_timesteps, n_features, n_outputs = X_train.shape[1], X_train.shape[2], y_train.shape[1]"],"metadata":{"execution":{"iopub.status.busy":"2024-03-21T14:04:28.268033Z","iopub.execute_input":"2024-03-21T14:04:28.268616Z","iopub.status.idle":"2024-03-21T14:04:34.56502Z","shell.execute_reply.started":"2024-03-21T14:04:28.268571Z","shell.execute_reply":"2024-03-21T14:04:34.563803Z"},"trusted":true,"id":"dfxYW0JHNR11","executionInfo":{"status":"error","timestamp":1711444490210,"user_tz":-330,"elapsed":1066,"user":{"displayName":"Shiva Sai Kumar Saini","userId":"05040382533783744648"}},"outputId":"3c2b3db2-a6ac-4bb6-d9a6-adf548713ff7","colab":{"base_uri":"https://localhost:8080/","height":304}},"execution_count":11,"outputs":[{"output_type":"error","ename":"FileNotFoundError","evalue":"[Errno 2] No such file or directory: '../input/human-activity-recognition/UCI_HAR_Dataset/train/Inertial Signals/body_acc_x_train.txt'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-11-832bf7f95d09>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mload_dataset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprefix\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"../input/human-activity-recognition/UCI_HAR_Dataset/\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mn_timesteps\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_features\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_outputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX_train\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_train\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-4-4862a8aed0ea>\u001b[0m in \u001b[0;36mload_dataset\u001b[0;34m(prefix)\u001b[0m\n\u001b[1;32m     32\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mload_dataset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprefix\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m''\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     33\u001b[0m     \u001b[0;31m# load all train\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 34\u001b[0;31m     \u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mload_dataset_group\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'train'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprefix\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     35\u001b[0m     \u001b[0;31m# load all test\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     36\u001b[0m     \u001b[0mX_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mload_dataset_group\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'test'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprefix\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-4-4862a8aed0ea>\u001b[0m in \u001b[0;36mload_dataset_group\u001b[0;34m(group, prefix)\u001b[0m\n\u001b[1;32m     25\u001b[0m     \u001b[0mfiles\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'total_acc_x_'\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mgroup\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;34m'.txt'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'total_acc_y_'\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mgroup\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;34m'.txt'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'total_acc_z_'\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mgroup\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;34m'.txt'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m     \u001b[0;31m# load input data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 27\u001b[0;31m     \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mload_group\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiles\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfilepath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     28\u001b[0m     \u001b[0;31m# load class output\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     29\u001b[0m     \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mload_file\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprefix\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mgroup\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m'/y_'\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mgroup\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;34m'.txt'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-4-4862a8aed0ea>\u001b[0m in \u001b[0;36mload_group\u001b[0;34m(files, prefix)\u001b[0m\n\u001b[1;32m      8\u001b[0m     \u001b[0mloaded\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mf\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mfiles\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m         \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mload_file\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprefix\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m         \u001b[0mloaded\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m     \u001b[0;31m# stack group so that features are the 3rd dimension\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-4-4862a8aed0ea>\u001b[0m in \u001b[0;36mload_file\u001b[0;34m(filepath)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# load a single file as a numpy array\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mload_file\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m     \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mheader\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdelim_whitespace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    209\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    210\u001b[0m                     \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnew_arg_name\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnew_arg_value\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 211\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    212\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    213\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mcast\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mF\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    329\u001b[0m                     \u001b[0mstacklevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfind_stack_level\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    330\u001b[0m                 )\n\u001b[0;32m--> 331\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    332\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    333\u001b[0m         \u001b[0;31m# error: \"Callable[[VarArg(Any), KwArg(Any)], Any]\" has no\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, error_bad_lines, warn_bad_lines, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options)\u001b[0m\n\u001b[1;32m    948\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    949\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 950\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    951\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    952\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    603\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    604\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 605\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    606\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    607\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m   1440\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1441\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mIOHandles\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1442\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1443\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1444\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, f, engine)\u001b[0m\n\u001b[1;32m   1733\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1734\u001b[0m                     \u001b[0mmode\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m\"b\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1735\u001b[0;31m             self.handles = get_handle(\n\u001b[0m\u001b[1;32m   1736\u001b[0m                 \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1737\u001b[0m                 \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    854\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    855\u001b[0m             \u001b[0;31m# Encoding\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 856\u001b[0;31m             handle = open(\n\u001b[0m\u001b[1;32m    857\u001b[0m                 \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    858\u001b[0m                 \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '../input/human-activity-recognition/UCI_HAR_Dataset/train/Inertial Signals/body_acc_x_train.txt'"]}]},{"cell_type":"markdown","source":["### LSTM Model"],"metadata":{"id":"8GUUsfBTNR11"}},{"cell_type":"code","source":["def model1():\n","    seed(17)\n","    set_seed(17)\n","    K.clear_session()\n","    model = Sequential()\n","    model.add(LSTM(64, input_shape=(n_timesteps,n_features)))\n","    model.add(Dropout(0.1))\n","    model.add(Dense(64, activation='relu'))\n","    model.add(Dense(n_outputs, activation='softmax'))\n","    model.compile(loss='categorical_crossentropy', optimizer=\"adam\", metrics=['accuracy'])\n","    return model"],"metadata":{"execution":{"iopub.status.busy":"2024-03-21T14:04:34.566501Z","iopub.execute_input":"2024-03-21T14:04:34.566905Z","iopub.status.idle":"2024-03-21T14:04:34.576578Z","shell.execute_reply.started":"2024-03-21T14:04:34.566859Z","shell.execute_reply":"2024-03-21T14:04:34.575343Z"},"trusted":true,"id":"Jh-TGvKbNR11","executionInfo":{"status":"aborted","timestamp":1711444490212,"user_tz":-330,"elapsed":24,"user":{"displayName":"Shiva Sai Kumar Saini","userId":"05040382533783744648"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["classifier1=run(model1)"],"metadata":{"execution":{"iopub.status.busy":"2024-03-21T14:04:34.578317Z","iopub.execute_input":"2024-03-21T14:04:34.57905Z"},"trusted":true,"id":"GVCpVe-NNR12","executionInfo":{"status":"aborted","timestamp":1711444490212,"user_tz":-330,"elapsed":24,"user":{"displayName":"Shiva Sai Kumar Saini","userId":"05040382533783744648"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### CNN Model"],"metadata":{"id":"tz_JHEsCNR12"}},{"cell_type":"code","source":["def model2():\n","    seed(17)\n","    set_seed(17)\n","    K.clear_session()\n","    model = Sequential()\n","    model.add(Conv1D(filters=64, kernel_size=3, activation='relu',input_shape=(n_timesteps, n_features)))\n","    model.add(Conv1D(filters=64, kernel_size=3, activation='relu'))\n","    model.add(Dropout(0.5))\n","    model.add(MaxPooling1D(pool_size=2))\n","    model.add(Flatten())\n","    model.add(Dense(100, activation='relu'))\n","    model.add(Dense(n_outputs, activation='softmax'))\n","    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n","    return model"],"metadata":{"trusted":true,"id":"zJJ_Z11DNR12","executionInfo":{"status":"aborted","timestamp":1711444490213,"user_tz":-330,"elapsed":25,"user":{"displayName":"Shiva Sai Kumar Saini","userId":"05040382533783744648"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["classifier2=run(model2)"],"metadata":{"trusted":true,"id":"QM1dh82xNR13","executionInfo":{"status":"aborted","timestamp":1711444490214,"user_tz":-330,"elapsed":25,"user":{"displayName":"Shiva Sai Kumar Saini","userId":"05040382533783744648"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### CNN-LSTM Network Model"],"metadata":{"id":"LahLtzsINR13"}},{"cell_type":"code","source":["# reshape data into time steps of sub-sequences\n","n_steps, n_length = 4, 32\n","X_train = X_train.reshape((X_train.shape[0], n_steps, n_length, n_features))\n","X_test = X_test.reshape((X_test.shape[0], n_steps, n_length, n_features))"],"metadata":{"trusted":true,"id":"lx7RjbHgNR13","executionInfo":{"status":"aborted","timestamp":1711444490214,"user_tz":-330,"elapsed":25,"user":{"displayName":"Shiva Sai Kumar Saini","userId":"05040382533783744648"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def model3():\n","    seed(17)\n","    set_seed(17)\n","    K.clear_session()\n","    model = Sequential()\n","    model.add(TimeDistributed(Conv1D(filters=64, kernel_size=3, activation='relu'), input_shape=(None,n_length,n_features)))\n","    model.add(TimeDistributed(MaxPooling1D(pool_size=2)))\n","    model.add(TimeDistributed(Dropout(0.5)))\n","    model.add(TimeDistributed(Conv1D(filters=128, kernel_size=3, activation='relu')))\n","    model.add(TimeDistributed(MaxPooling1D(pool_size=2)))\n","    model.add(TimeDistributed(Dropout(0.5)))\n","    model.add(TimeDistributed(Flatten()))\n","    model.add(LSTM(100))\n","    model.add(Dropout(0.5))\n","    model.add(Dense(100, activation='relu'))\n","    model.add(Dense(n_outputs, activation='softmax'))\n","    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n","    return model"],"metadata":{"trusted":true,"id":"22ir92BsNR14","executionInfo":{"status":"aborted","timestamp":1711444490215,"user_tz":-330,"elapsed":25,"user":{"displayName":"Shiva Sai Kumar Saini","userId":"05040382533783744648"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["classifier3=run(model3)"],"metadata":{"trusted":true,"id":"kwJcRE4ONR14","executionInfo":{"status":"aborted","timestamp":1711444490215,"user_tz":-330,"elapsed":25,"user":{"displayName":"Shiva Sai Kumar Saini","userId":"05040382533783744648"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Performance of Final Model"],"metadata":{"id":"uSIcYAbpNR14"}},{"cell_type":"code","source":["classifier3.summary()"],"metadata":{"trusted":true,"id":"ZWcIlDZmNR14","executionInfo":{"status":"aborted","timestamp":1711444490216,"user_tz":-330,"elapsed":26,"user":{"displayName":"Shiva Sai Kumar Saini","userId":"05040382533783744648"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Final evaluation of the model\n","scores = classifier3.evaluate(X_test, y_test, verbose=0)\n","print(\"Test Loss: %f\" % (scores[0]))\n","print(\"Test Accuracy: %f%%\" % (scores[1]*100))"],"metadata":{"trusted":true,"id":"4SqLG3c3NR15","executionInfo":{"status":"aborted","timestamp":1711444490217,"user_tz":-330,"elapsed":25139,"user":{"displayName":"Shiva Sai Kumar Saini","userId":"05040382533783744648"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Confusion Matrix\n","y_pred=classifier3.predict(X_test)\n","y_predict=pd.Series([activities[i+1] for i in np.argmax(y_pred, axis=1)])\n","y_actual=pd.Series([activities[i+1] for i in np.argmax(y_test, axis=1)])\n","\n","\n","# Code for drawing seaborn heatmaps\n","class_names = list(activities.values())\n","df_heatmap = pd.DataFrame(confusion_matrix(y_actual, y_predict) )\n","\n","plt.style.use('seaborn-whitegrid')\n","sns.set(style=\"white\", font_scale = 1.5)\n","\n","fig = plt.figure(figsize=(15,12))\n","heatmap = sns.heatmap(df_heatmap, annot=True, fmt=\"d\", cmap=\"Blues\")\n","\n","# Setting tick labels for heatmap\n","heatmap.yaxis.set_ticklabels(heatmap.yaxis.get_ticklabels(), rotation=0, ha='right')\n","heatmap.xaxis.set_ticklabels(heatmap.xaxis.get_ticklabels(), rotation=30, ha='right')\n","heatmap.set_xticklabels(class_names)\n","heatmap.set_yticklabels(class_names)\n","plt.ylabel('Actual Activity')\n","plt.xlabel('Predicted Activity')\n","plt.title(\"Confusion Matrix\\n\")\n","\n","plt.show()"],"metadata":{"trusted":true,"id":"qy7WTYa-NR15","executionInfo":{"status":"aborted","timestamp":1711444490217,"user_tz":-330,"elapsed":25138,"user":{"displayName":"Shiva Sai Kumar Saini","userId":"05040382533783744648"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Classification Report\n","cr=classification_report(y_actual, y_predict, target_names=activities.values(), digits=4)\n","print(cr)"],"metadata":{"trusted":true,"id":"ftDv9Bq8NR15","executionInfo":{"status":"aborted","timestamp":1711444490218,"user_tz":-330,"elapsed":25138,"user":{"displayName":"Shiva Sai Kumar Saini","userId":"05040382533783744648"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# ROC AUC\n","n_classes = 6\n","\n","fpr = dict()\n","tpr = dict()\n","roc_auc = dict()\n","for i in range(n_classes):\n","    fpr[i], tpr[i], _ = roc_curve(y_test[:, i], y_pred[:, i])\n","    roc_auc[i] = auc(fpr[i], tpr[i])\n","\n","#Compute micro-average ROC curve and ROC area\n","fpr[\"micro\"], tpr[\"micro\"], _ = roc_curve(y_test.ravel(), y_pred.ravel())\n","roc_auc[\"micro\"] = auc(fpr[\"micro\"], tpr[\"micro\"])\n","\n","# First aggregate all false positive rates\n","all_fpr = np.unique(np.concatenate([fpr[i] for i in range(n_classes)]))\n","\n","# Then interpolate all ROC curves at this points\n","mean_tpr = np.zeros_like(all_fpr)\n","for i in range(n_classes):\n","    mean_tpr += np.interp(all_fpr, fpr[i], tpr[i])\n","\n","# Finally average it and compute AUC\n","mean_tpr /= n_classes\n","\n","fpr[\"macro\"] = all_fpr\n","tpr[\"macro\"] = mean_tpr\n","roc_auc[\"macro\"] = auc(fpr[\"macro\"], tpr[\"macro\"])\n","\n","# Plot all ROC curves\n","plt.style.use('seaborn-whitegrid')\n","sns.set(style=\"white\", font_scale = 1.2)\n","plt.figure(figsize=(12,12))\n","plt.plot(fpr[\"micro\"], tpr[\"micro\"],\n","         label='micro-average ROC curve (area = {0:0.2f})'\n","               ''.format(roc_auc[\"micro\"]),\n","         color='deeppink', linestyle=':', linewidth=4)\n","\n","plt.plot(fpr[\"macro\"], tpr[\"macro\"],\n","         label='macro-average ROC curve (area = {0:0.2f})'\n","               ''.format(roc_auc[\"macro\"]),\n","         color='navy', linestyle=':', linewidth=4)\n","\n","colors = ['aqua', 'darkorange', 'cornflowerblue', \"red\", \"green\", \"black\"]\n","for i, color in zip(range(n_classes), colors):\n","    plt.plot(fpr[i], tpr[i], color=color,\n","             label='{0} (area = {1:0.2f})'\n","             ''.format(activities[i+1], roc_auc[i]))\n","\n","plt.plot([0, 1], [0, 1], 'k--')\n","plt.xlim([0.0, 1.0])\n","plt.ylim([0.0, 1.05])\n","plt.xlabel('False Positive Rate')\n","plt.ylabel('True Positive Rate')\n","plt.title('ROC curve for each activity')\n","plt.legend(loc=\"lower right\")\n","\n","plt.show()"],"metadata":{"trusted":true,"id":"hbwnPDiZNR15","executionInfo":{"status":"aborted","timestamp":1711444490219,"user_tz":-330,"elapsed":25137,"user":{"displayName":"Shiva Sai Kumar Saini","userId":"05040382533783744648"}}},"execution_count":null,"outputs":[]}]}